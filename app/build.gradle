apply plugin: 'com.android.application'

android {
    compileSdk 33

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def versionMajor = versionProps['VERSION_MAJOR']
        def versionMinor = versionProps['VERSION_MINOR']
        def versionPatch = versionProps['VERSION_PATCH']
        def vCode = versionProps['VERSION_CODE'].toInteger()

        defaultConfig {
            applicationId "uppd.com.vrec"
            minSdkVersion 24
            targetSdkVersion 33
            versionCode  vCode
            versionName  "${versionMajor}.${versionMinor}.${versionPatch}"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

            def filesAuthorityValue = applicationId + ".files"
            manifestPlaceholders = [filesAuthority: filesAuthorityValue]
            buildConfigField "String", "FILES_AUTHORITY", "\"${filesAuthorityValue}\""
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        release {
            def alias = System.getenv("KEY_ALIAS")
            if (alias != null) {
                storeFile file("../release.keystore")
                storePassword System.getenv("STORE_PASSWORD")
                keyAlias alias
                keyPassword System.getenv("KEY_PASSWORD")
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    buildFeatures {
        buildConfig true
    }
    dataBinding {
        enabled = true
    }/*
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }*/
    namespace "uppd.com.vrec"
}

tasks.register('bumpVersion') {
    def versionPropsFile = file('version.properties')

    if (!versionPropsFile.canRead()) {
        throw new GradleException("Could not read version.properties!")
    }

    Properties versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))
    def versionMajor = versionProps['VERSION_MAJOR']
    def versionMinor = versionProps['VERSION_MINOR']
    def versionPatch = versionProps['VERSION_PATCH']
    def vCode = versionProps['VERSION_CODE'].toInteger()

    versionPatch = versionPatch.toInteger() + 1
    vCode += 1
    final vName = "v${versionMajor}.${versionMinor}.${versionPatch}"

    versionProps['VERSION_CODE'] = vCode.toString()
    versionProps['VERSION_PATCH'] = versionPatch.toString()

    versionProps.store(versionPropsFile.newWriter(), null)

    exec {
        executable "git"
        args 'add', '.'
    }
    exec {
        executable "git"
        args "commit", "-m", "Bump for $vName"
    }
    exec {
        executable "git"
        args "tag", vName
    }
    exec {
        executable "git"
        args "push", "https://${System.getenv("GITHUB_TOKEN")}@github.com/${System.getenv("GITHUB_REPOSITORY")}.git", "HEAD", "--tags"
    }

    file("../version_name.txt").text = vName
}

ext {
    supportLibVersion = '27.0.2'
    daggerVersion = "2.12"
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:${supportLibVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.android.support:design:${supportLibVersion}"
    implementation "com.android.support:preference-v7:$supportLibVersion"
    implementation "com.android.support:recyclerview-v7:$supportLibVersion"

    // di
    implementation "com.google.dagger:dagger-android-support:${daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    // utils
    compileOnly "org.projectlombok:lombok:1.18.32"
    annotationProcessor "org.projectlombok:lombok:1.18.32"

    // rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.7'
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'

    // smtp
    implementation fileTree(dir: 'libs', include: ['*.aar'])

    // job queue
    implementation 'com.birbit:android-priority-jobqueue:2.0.1'

    // event bus
    implementation 'org.greenrobot:eventbus:3.1.1'

    // Firebase
    implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }
    implementation 'com.google.firebase:firebase-core:11.4.2'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

